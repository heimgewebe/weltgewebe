version: 1

env_priority:
  - dev
  - default
  - devcontainer
  - devbox
  - mise_direnv
  - termux

tooling:
  uv:
    version: "0.7.x"  # intentionally pinned; revisit after 0.8.x stabilizes
  python:
    version: "3.12"
    uv: true
    precommit: true
  rust:
    cargo: auto
    clippy_strict: true
    fmt_check: true
    deny: optional

tasks:
  up:
    desc: "Dev-Umgebung hochfahren (Container/venv/tooling bootstrap)"
    sh:
      - |
        if command -v devcontainer >/dev/null 2>&1 || [ -f .devcontainer/devcontainer.json ]; then
          echo "[wgx.up] devcontainer context detected"
        fi
        if command -v uv >/dev/null 2>&1; then
          uv --version || true
          if [ -f pyproject.toml ]; then
            uv sync --frozen
          fi
        fi
        if [ -f .pre-commit-config.yaml ] && command -v pre-commit >/dev/null 2>&1; then
          pre-commit install
        fi
  lint:
    desc: "Schnelle statische Checks (Rust/Python/Markdown/YAML)"
    sh:
      - |
        if [ -f Cargo.toml ]; then
          cargo fmt --all -- --check
          cargo clippy --all-targets --all-features -- -D warnings
        fi
        if [ -f pyproject.toml ] && command -v uv >/dev/null 2>&1; then
          uv run ruff check .
          uv run ruff format --check .
        fi
        if command -v markdownlint >/dev/null 2>&1; then
          markdownlint "**/*.md"
        fi
        if command -v yamllint >/dev/null 2>&1; then
          yamllint .
        fi
  test:
    desc: "Testsuite"
    sh:
      - |
        if [ -f Cargo.toml ]; then
          cargo test --all --all-features
        fi
        if [ -f pyproject.toml ] && command -v uv >/dev/null 2>&1; then
          uv run pytest -q
        fi
  build:
    desc: "Build-Artefakte erstellen"
    sh:
      - |
        if [ -f Cargo.toml ]; then
          cargo build --release
        fi
        if [ -f pyproject.toml ] && command -v uv >/dev/null 2>&1; then
          uv build
        fi
  smoke:
    desc: "Schnelle Smoke-Checks (l√§uft <60s)"
    sh:
      - |
        echo "[wgx.smoke] repo=$(basename "$(git rev-parse --show-toplevel)")"
        if [ -f Cargo.toml ]; then
          cargo metadata --no-deps > /dev/null
        fi
        if [ -f pyproject.toml ]; then
          grep -q '\[project\]' pyproject.toml
        fi

wgx:
  org: heimgewebe
  repo:
    name: auto
    description: "WGX profile for unified tasks and env priorities"

meta:
  owner: heimgewebe
  conventions:
    gewebedir: ".gewebe"
    version_endpoint: "/version"
    tasks_standardized: true
