name: wgx-guard

on:
  push:
    paths:
      - ".wgx/**"
      - ".github/workflows/wgx-guard.yml"
      - "pyproject.toml"
      - "Cargo.toml"
  pull_request:
    paths:
      - ".wgx/**"
      - ".github/workflows/wgx-guard.yml"
      - "pyproject.toml"
      - "Cargo.toml"
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: wgx-guard-${{ github.ref }}
  cancel-in-progress: true

jobs:
  guard:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        # Pin to fixed v4.2.2 release to keep builds deterministic
        uses: actions/checkout@v4.2.2

      - name: Check .wgx/profile.yml presence
        run: |
          test -f .wgx/profile.yml || { echo "::error::.wgx/profile.yml missing"; exit 1; }
          echo "found .wgx/profile.yml"

      - name: Setup Python (with pip cache)
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml

      - name: Install PyYAML
        run: |
          python -m pip install --disable-pip-version-check --upgrade pip
          python -m pip install --disable-pip-version-check pyyaml==6.0.2

      # --- Schema-Light-Check: Minimal-Validierung des Profils ---
      - name: Run schema-lite check
        run: |
          python - <<'PY'
          import sys, yaml, pathlib
          p = pathlib.Path(".wgx/profile.yml")
          data = yaml.safe_load(p.read_text(encoding="utf-8")) or {}
          if not isinstance(data, dict):
              print("::error::.wgx/profile.yml must be a YAML mapping"); sys.exit(1)
          required_top = ["version","env_priority","tooling","tasks"]
          missing = [k for k in required_top if k not in data]
          if missing:
              print(f"::error::missing keys: {missing}")
              sys.exit(1)
          envp = data["env_priority"]
          if not isinstance(envp, list) or not envp:
              print("::error::env_priority must be a non-empty list")
              sys.exit(1)
          for t in ["up","lint","test","build","smoke"]:
              if t not in data["tasks"]:
                  print(f"::error::task '{t}' missing")
                  sys.exit(1)
          print("schema-lite ok")
          PY

      # --- Caching für uv (alle Subprojekte) ---
      - name: (Optional) Cache uv
        # consider *any* tracked Python project in subdirectories
        if: ${{ hashFiles('**/pyproject.toml') != '' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
          key: uv-${{ runner.os }}-${{ hashFiles('**/pyproject.toml') }}

      - name: (Optional) No Python projects detected
        if: ${{ hashFiles('**/pyproject.toml') == '' }}
        run: echo "No Python projects detected – skipping uv bootstrap."

      # --- UV-Bootstrap: Version aus toolchain.versions.yml ableiten ---
      - name: (Optional) UV bootstrap (pyproject present)
        if: ${{ hashFiles('**/pyproject.toml') != '' }}
        run: |
          set -euo pipefail
          UV_SERIES_DEFAULT="0.8"
          if [ -f toolchain.versions.yml ]; then
            UV_SERIES="$(python - <<'PY'
import sys
from pathlib import Path
import yaml
t = Path("toolchain.versions.yml")
d = yaml.safe_load(t.read_text(encoding="utf-8")) or {}
uv = str(d.get("uv", "")).strip()
parts = uv.split(".")
if not uv or len(parts) < 2:
    print(f"::error::unexpected uv version: {uv}", file=sys.stderr); sys.exit(1)
print(".".join(parts[:2]))
PY
            )"
          else
            echo "::warning::toolchain.versions.yml missing → defaulting to uv ${UV_SERIES_DEFAULT}.x"
            UV_SERIES="$UV_SERIES_DEFAULT"
          fi
          echo "expecting uv ${UV_SERIES}.x"
          if command -v uv >/dev/null 2>&1 && uv --version | grep -qE "^uv ${UV_SERIES//./\\.}\\."; then
            echo "uv bereits vorhanden (Serie ${UV_SERIES}.x) – überspringe Installation."
          else
            python -m pip install --user --disable-pip-version-check "uv==${UV_SERIES}.*"
          fi
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          export PATH="$HOME/.local/bin:$PATH"
          if ! command -v uv >/dev/null 2>&1; then
            echo "::warning::uv not found after installation step"
          fi
          ver="$(uv --version || true)"
          echo "uv version: $ver"
          regex="^uv ${UV_SERIES//./\\.}\."
          if ! [[ "$ver" =~ $regex ]]; then
            echo "::error::uv ${UV_SERIES}.x erwartet, gefunden: $ver"
            exit 1
          fi

          # Iterate over ALL tracked pyproject.toml files (root or subdirs)
          shopt -s nullglob
          mapfile -d '' files < <(git ls-files -z '**/pyproject.toml')
          status=0
          for file in "${files[@]}"; do
            dir="$(dirname "$file")"
            echo "::group::uv sync in $dir"
            if [ -f "$dir/uv.lock" ]; then
              ( cd "$dir" && uv sync --frozen ) || { echo "::error::uv sync failed in $dir (frozen)"; status=1; }
            else
              ( cd "$dir" && uv sync ) || { echo "::error::uv sync failed in $dir"; status=1; }
            fi
            echo "::endgroup::"
          done
          echo "uv sync completed with status=${status}"
          exit "$status"

      - name: Done
        run: echo "wgx-guard passed ✅"
