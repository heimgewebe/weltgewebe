name: wgx-guard

on:
  push:
    paths:
      - ".wgx/**"
      - ".github/workflows/wgx-guard.yml"
      - "pyproject.toml"
      - "Cargo.toml"
  pull_request:
    paths:
      - ".wgx/**"
      - ".github/workflows/wgx-guard.yml"
      - "pyproject.toml"
      - "Cargo.toml"
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: wgx-guard-${{ github.ref }}
  cancel-in-progress: true

jobs:
  guard:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        # Pin to fixed v4.2.2 release to keep builds deterministic
        uses: actions/checkout@v4.2.2

      - name: Check .wgx/profile.yml presence
        run: |
          test -f .wgx/profile.yml || { echo "::error::.wgx/profile.yml missing"; exit 1; }
          echo "found .wgx/profile.yml"

      - name: Setup Python (with pip cache)
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml

      - name: Install PyYAML
        run: |
          python -m pip install --disable-pip-version-check --upgrade pip
          python -m pip install --disable-pip-version-check pyyaml==6.0.2

      - name: Run schema-lite check
        run: |
          python - <<'PY'
          import sys, yaml, pathlib
          p = pathlib.Path(".wgx/profile.yml")
          data = yaml.safe_load(p.read_text(encoding="utf-8"))
          if not isinstance(data, dict):
              print("::error::.wgx/profile.yml must be a YAML mapping"); sys.exit(1)
          required_top = ["version","env_priority","tooling","tasks"]
          missing = [k for k in required_top if k not in data]
          if missing:
              print(f"::error::missing keys: {missing}")
              sys.exit(1)
          envp = data["env_priority"]
          if not isinstance(envp, list) or not envp:
              print("::error::env_priority must be a non-empty list")
              sys.exit(1)
          for t in ["up","lint","test","build","smoke"]:
              if t not in data["tasks"]:
                  print(f"::error::task '{t}' missing")
                  sys.exit(1)
          print("schema-lite ok")
          PY

      - name: (Optional) Cache uv & venv
        if: ${{ hashFiles('**/pyproject.toml') != '' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
          key: uv-${{ runner.os }}-${{ hashFiles('**/pyproject.toml', '**/uv.lock', 'uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('**/pyproject.toml') }}-
            uv-${{ runner.os }}-

      - name: (Optional) UV bootstrap (pyproject present)
        if: ${{ hashFiles('**/pyproject.toml') != '' }}
        run: |
          set -euo pipefail
          python -m pip install --user --disable-pip-version-check 'uv==0.8.*'
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          export PATH="$HOME/.local/bin:$PATH"
          ver="$(uv --version || true)"
          echo "uv version: $ver"
          if ! [[ "$ver" =~ ^uv\ 0\.8\. ]]; then
            echo "::error::uv 0.8.x erwartet, gefunden: $ver"
            exit 1
          fi

          if [ -f uv.lock ]; then
            echo "using existing uv.lock → sync --frozen"
            uv sync --frozen
          else
            echo "no uv.lock → creating lock + sync"
            uv lock
            uv sync
          fi

      - name: Done
        run: echo "wgx-guard passed ✅"
