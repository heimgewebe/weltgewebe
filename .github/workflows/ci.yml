name: CI

permissions:
  contents: read

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash --noprofile --norc -euo pipefail {0}

jobs:
  ci:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      NODE_OPTIONS: --max-old-space-size=4096
    steps:
      - uses: actions/checkout@v4

      - name: Install yq (for toolchain.versions.yml)
        run: |
          set -euo pipefail
          YQ_VERSION=4.44.1
          ARCH="$(uname -m)"
          case "${ARCH}" in
            x86_64)  BIN="yq_linux_amd64" ;;
            aarch64|arm64) BIN="yq_linux_arm64" ;;
            *) echo "Unsupported arch for yq: ${ARCH}" >&2; exit 1 ;;
          esac
          echo "yq installer: detected architecture '${ARCH}'"
          URL_BASE="https://github.com/mikefarah/yq/releases/download/v${YQ_VERSION}"
          BIN_URL="${URL_BASE}/${BIN}"
          TMP="$(mktemp)"
          TMP_SHA="${TMP}.sha256"
          trap 'rm -f "${TMP}" "${TMP_SHA}"' EXIT
          echo "Downloading ${BIN_URL}"
          curl -fsSL "${BIN_URL}" -o "${TMP}"
          # Verify against matching checksum for the exact binary
          curl -fsSL "${BIN_URL}.sha256" -o "${TMP_SHA}"
          EXPECTED="$(awk '{print $1}' "${TMP_SHA}")"
          ACTUAL="$(sha256sum "${TMP}" | awk '{print $1}')"
          if [ "${EXPECTED}" != "${ACTUAL}" ]; then
            echo "yq checksum mismatch: expected ${EXPECTED}, got ${ACTUAL}" >&2
            exit 1
          fi
          sudo install -m 0755 "${TMP}" /usr/local/bin/yq
          rm -f "${TMP}" "${TMP_SHA}"
          trap - EXIT
          yq --version

      - name: Read toolchain versions
        run: |
          test -f toolchain.versions.yml || { echo "toolchain.versions.yml not found"; exit 1; }
          RUST=$(yq -r '.rust' toolchain.versions.yml)
          echo "RUST_VERSION=${RUST}" >> "$GITHUB_ENV"
          PY=$(yq -r '.python' toolchain.versions.yml)
          echo "PYTHON_VERSION=${PY}" >> "$GITHUB_ENV"
          UV=$(yq -r '.uv' toolchain.versions.yml)
          echo "UV_VERSION=${UV}" >> "$GITHUB_ENV"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy

      - name: Cache Cargo artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ env.RUST_VERSION }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ env.RUST_VERSION }}-
            ${{ runner.os }}-cargo-

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'
          check-latest: true
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            apps/web/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache uv artifacts
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ env.UV_VERSION }}-${{ hashFiles('**/pyproject.toml', 'toolchain.versions.yml') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install uv
        env:
          UV_VERSION: ${{ env.UV_VERSION }}
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.local/bin"
          ARCH="$(uname -m)"
          case "${ARCH}" in
            x86_64)  TARBALL="uv-x86_64-unknown-linux-gnu.tar.gz" ;;
            aarch64) TARBALL="uv-aarch64-unknown-linux-gnu.tar.gz" ;;
            arm64)   TARBALL="uv-aarch64-unknown-linux-gnu.tar.gz" ;;
            *) echo "Unsupported arch: ${ARCH}" >&2; exit 1 ;;
          esac
          URL="https://github.com/astral-sh/uv/releases/download/v${UV_VERSION}/${TARBALL}"
          echo "Downloading ${URL}"
          TMP_TGZ="$(mktemp)"
          TMP_SHA="${TMP_TGZ}.sha256"
          trap 'rm -f "${TMP_TGZ}" "${TMP_SHA}"' EXIT
          curl -fL "$URL" -o "${TMP_TGZ}"
          if curl -fsL "https://github.com/astral-sh/uv/releases/download/v${UV_VERSION}/SHA256SUMS" -o "${TMP_SHA}"; then
            (cd "$(dirname "${TMP_TGZ}")" && grep " ${TARBALL}$" "${TMP_SHA}" | sha256sum -c -)
          fi
          tar xzf "${TMP_TGZ}" -C "$HOME/.local/bin" uv
          chmod +x "$HOME/.local/bin/uv"
          export PATH="$HOME/.local/bin:$PATH"
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          echo "$HOME/.cargo/bin" >> "$GITHUB_PATH"
          INSTALLED=$(uv --version | awk '{print $2}')
          if [[ "${INSTALLED}" != "${UV_VERSION}" ]]; then
            echo "Expected uv ${UV_VERSION}, got ${INSTALLED}" >&2
            exit 1
          fi
          trap - EXIT

      - name: Setup Just
        uses: extractions/setup-just@v2

      - name: Show tool versions
        run: |
          rustc --version
          python --version
          uv --version
          just --version

      - name: Validate project
        run: just ci


  web-e2e:
    name: Web E2E
    runs-on: ubuntu-latest
    needs: ci
    timeout-minutes: 20
    env:
      HEADLESS: "1"
      NPM_CONFIG_AUDIT: "false"
      NPM_CONFIG_FUND: "false"
    defaults:
      run:
        shell: bash --noprofile --norc -euo pipefail {0}
        working-directory: apps/web
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'
          check-latest: true
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json

      - name: Enable Corepack (npm)
        run: corepack enable

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright browser binaries
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-ms-playwright-${{ hashFiles('apps/web/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-ms-playwright-

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Start preview server
        run: |
          npm run preview -- --host 127.0.0.1 --port 4173 &> /tmp/preview.log &
          npx --yes wait-on http://127.0.0.1:4173

      - name: Run Playwright tests
        env:
          PLAYWRIGHT_SKIP_WEBSERVER: "1"
          PLAYWRIGHT_HTML_REPORT: playwright-report
        run: npm run test:ci

      - name: Upload Playwright report
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ github.run_id }}
          path: apps/web/playwright-report

  lint-docs:
    name: Docs & Shell Hygiene
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Markdownlint
        uses: DavidAnson/markdownlint-cli2-action@v16
        with:
          globs: |
            **/*.md
            !**/node_modules/**
            !**/dist/**

      - name: Link check (lychee)
        uses: lycheeverse/lychee-action@v2
        with:
          args: >
            --no-progress
            --accept 200,206,301,302,429
            --timeout 15s
            --max-concurrency 3
            --retry-wait-time 3s
            --max-retries 3
            --exclude 'https?://(localhost|127\.0\.0\.1|0\.0\.0\.0)(:\d+)?(/.*)?'
            --exclude-path '**/node_modules/**'
            --exclude-path '**/dist/**'
            '**/*.md'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: YAML lint
        uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: |
            .
          strict: true

      - name: Ensure jq is available
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update
            sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends jq
          fi

      - name: JSON lint
        run: |
          set -euo pipefail
          mapfile -d '' files < <(git ls-files -z '*.json' ':!:**/package-lock.json' || true)
          if (( ${#files[@]} )); then
            jq -n 'inputs' "${files[@]}" >/dev/null
          else
            echo "No JSON files to lint"
          fi
