name: CI

permissions:
  contents: read

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash --noprofile --norc -euo pipefail {0}

jobs:
  ci:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      NODE_OPTIONS: --max-old-space-size=4096
    steps:
      - uses: actions/checkout@v4

      - name: Install yq (for toolchain.versions.yml)
        env:
          YQ_VERSION: 4.44.1
        run: |
          scripts/tools/yq-pin.sh ensure "${YQ_VERSION}"
          yq --version

      - name: Read toolchain versions
        run: |
          test -f toolchain.versions.yml || { echo "toolchain.versions.yml not found"; exit 1; }
          RUST=$(yq -r '.rust' toolchain.versions.yml)
          echo "RUST_VERSION=${RUST}" >> "$GITHUB_ENV"
          PY=$(yq -r '.python' toolchain.versions.yml)
          echo "PYTHON_VERSION=${PY}" >> "$GITHUB_ENV"
          UV=$(yq -r '.uv' toolchain.versions.yml)
          echo "UV_VERSION=${UV}" >> "$GITHUB_ENV"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy

      - name: Cache Cargo artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ env.RUST_VERSION }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ env.RUST_VERSION }}-
            ${{ runner.os }}-cargo-

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'
          check-latest: true
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            apps/web/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache uv artifacts
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ env.UV_VERSION }}-${{ hashFiles('**/pyproject.toml', 'toolchain.versions.yml') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install uv
        env:
          UV_VERSION: ${{ env.UV_VERSION }}
        run: |
          scripts/tools/uv-pin.sh ensure "${UV_VERSION}"
          echo "$HOME/.cargo/bin" >> "$GITHUB_PATH"
          uv --version

      - name: Setup Just
        uses: extractions/setup-just@v2

      - name: Show tool versions
        run: |
          rustc --version
          python --version
          uv --version
          just --version

      - name: Validate project
        run: just ci

  e2e:
    name: Web E2E
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [ci]
    if: ${{ always() }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('apps/web/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install dependencies
        working-directory: apps/web
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Build & start preview
        working-directory: apps/web
        env:
          HOST: 127.0.0.1
          PORT: 4173
        run: |
          npm run build
          npm run preview -- --port "$PORT" --host "$HOST" &> /tmp/preview.log &
          npx wait-on "http://$HOST:$PORT"

      - name: Run Playwright tests
        working-directory: apps/web
        env:
          PLAYWRIGHT_HTML_REPORT: playwright-report
        run: npm run test:ci

      - name: Upload Playwright report
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: apps/web/playwright-report


  lint-docs:
    name: Docs & Shell Hygiene
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Markdownlint
        uses: DavidAnson/markdownlint-cli2-action@v16
        with:
          globs: |
            **/*.md
            !**/node_modules/**
            !**/dist/**

      - name: Link check (lychee)
        uses: lycheeverse/lychee-action@v2
        with:
          args: >
            --no-progress
            --accept 200,206,301,302,429
            --timeout 15s
            --max-concurrency 3
            --retry-wait-time 3s
            --max-retries 3
            --exclude 'https?://(localhost|127\.0\.0\.1|0\.0\.0\.0)(:\d+)?(/.*)?'
            --exclude-path '**/node_modules/**'
            --exclude-path '**/dist/**'
            '**/*.md'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: YAML lint
        uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: |
            .
          strict: true

      - name: Ensure jq is available
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update
            sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends jq
          fi

      - name: JSON lint
        run: |
          set -euo pipefail
          mapfile -d '' files < <(git ls-files -z '*.json' ':!:**/package-lock.json' || true)
          if (( ${#files[@]} )); then
            jq -n 'inputs' "${files[@]}" >/dev/null
          else
            echo "No JSON files to lint"
          fi
