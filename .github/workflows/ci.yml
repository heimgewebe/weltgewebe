name: CI

permissions:
  contents: read

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash --noprofile --norc -euo pipefail {0}

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Ensure yq is available
        run: |
          scripts/tools/yq-pin.sh ensure
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Read toolchain versions
        run: |
          test -f toolchain.versions.yml || { echo "toolchain.versions.yml not found"; exit 1; }
          RUST=$(yq -r '.rust' toolchain.versions.yml)
          echo "RUST_VERSION=${RUST}" >> "$GITHUB_ENV"
          PY=$(yq -r '.python' toolchain.versions.yml)
          echo "PYTHON_VERSION=${PY}" >> "$GITHUB_ENV"
          UV=$(yq -r '.uv' toolchain.versions.yml)
          echo "UV_VERSION=${UV}" >> "$GITHUB_ENV"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy

      - name: Cache Cargo artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            apps/web/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache uv artifacts
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ env.UV_VERSION }}-${{ hashFiles('**/pyproject.toml') }}

      - name: Install uv
        env:
          UV_VERSION: ${{ env.UV_VERSION }}
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          export PATH="$HOME/.local/bin:$PATH"
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          echo "$HOME/.cargo/bin" >> "$GITHUB_PATH"
          INSTALLED=$(uv --version | awk '{print $2}')
          if [[ "${INSTALLED}" != "${UV_VERSION}" ]]; then
            echo "Expected uv ${UV_VERSION}, got ${INSTALLED}" >&2
            exit 1
          fi

      - name: Setup Just
        uses: extractions/setup-just@v2

      - name: Show tool versions
        run: |
          rustc --version
          python --version
          uv --version
          just --version

      - name: Validate project
        run: just ci


  lint-docs:
    name: Docs & Shell Hygiene
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Markdownlint
        run: |
          npm install -g markdownlint-cli@0.41.0
          git ls-files '*.md' | xargs -r markdownlint

      - name: ShellCheck
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y shellcheck
          git ls-files '*.sh' | xargs -r shellcheck -x

      - name: Broken-Link Check
        uses: lycheeverse/lychee-action@v2
        with:
          args: --config .lychee.toml .
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
