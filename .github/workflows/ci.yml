name: CI (smart PR)

on:
  pull_request: # Security: pull_request since workflow executes foreign code
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review, labeled, unlabeled]
  merge_group: {}
  workflow_dispatch:
    inputs:
      toolchain:
        description: Rust toolchain channel to use for API checks
        required: false
        default: stable
  workflow_call:
    inputs:
      toolchain:
        description: Rust toolchain channel to use for API checks
        required: false
        type: string
        default: stable

permissions:
  contents: read
  pull-requests: read

env:
  # Robust default für alle Events (workflow_call, dispatch, PR, merge_group).
  toolchain: ${{ inputs.toolchain || (github.event_name == 'workflow_dispatch' && github.event.inputs.toolchain) || 'stable' }}

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      web:  ${{ steps.filter.outputs.web }}
      docs: ${{ steps.filter.outputs.docs }}
      api:  ${{ steps.filter.outputs.api }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
          persist-credentials: false
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            web:
              - 'apps/web/**'
              - 'package*.json'
              - '**/vite.config.*'
              - '**/svelte.config.*'
              - '.github/workflows/**'
            docs:
              - '**/*.md'
              - 'docs/**'
            api:
              - 'apps/api/**'
              - '.github/workflows/**'
              - 'ci/**'

  repo-lint:
    name: Repo – markdown & shell lint
    needs: changes
    if: needs.changes.outputs.docs == 'true' || github.event_name == 'merge_group'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
      - name: Markdownlint
        run: |
          npm i -g markdownlint-cli@0.41.0
          git ls-files '*.md' | xargs -r markdownlint
      - name: ShellCheck
        run: |
          sudo apt-get update && sudo apt-get install -y shellcheck
          git ls-files '*.sh' | xargs -r shellcheck -x
      - name: Lychee link check
        uses: lycheeverse/lychee-action@v2
        with:
          args: --config .lychee.toml .
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  api:
    name: API – build, fmt, clippy & test
    needs: changes
    if: needs.changes.outputs.api == 'true' || github.event_name == 'merge_group'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      CARGO_TERM_COLOR: always
    defaults:
      run:
        working-directory: apps/api
        shell: bash
    steps:
      - uses: actions/checkout@v4
      - name: Ensure default toolchain
        run: |
          if [[ -z "${toolchain:-}" ]]; then
            echo "toolchain=stable" >> "$GITHUB_ENV"
            echo "toolchain input missing; defaulting to 'stable'"
          fi
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.toolchain || 'stable' }}
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
      - name: cargo fmt
        run: cargo fmt -- --check
      - name: cargo clippy
        run: cargo clippy -- -D warnings
      - name: cargo build
        run: cargo build --locked
      - name: cargo test
        run: cargo test --locked

  web-check:
    name: Web – typecheck (svelte-check)
    needs: changes
    if: needs.changes.outputs.web == 'true' || github.event_name == 'merge_group'
    runs-on: ubuntu-latest
    timeout-minutes: 12
    permissions:
      contents: read
      actions: write   # required for npm cache restore
    env:
      CI: true
      PUPPETEER_SKIP_DOWNLOAD: 'true'
      NPM_CONFIG_AUDIT: 'false'
      NPM_CONFIG_FUND: 'false'
    defaults: { run: { working-directory: apps/web, shell: bash } }
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
          persist-credentials: false
      - uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json
      - name: Enable Corepack (npm)
        run: corepack enable
      - name: Install dependencies
        run: npm ci
      - name: Svelte Type Check
        run: npx svelte-check --tsconfig ./tsconfig.json

  web-build:
    name: Web – build
    needs: [web-check, changes]
    if: needs.changes.outputs.web == 'true' || github.event_name == 'merge_group'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      actions: write   # required for npm cache restore
    env:
      CI: true
      PUPPETEER_SKIP_DOWNLOAD: 'true'
      NPM_CONFIG_AUDIT: 'false'
      NPM_CONFIG_FUND: 'false'
    defaults: { run: { working-directory: apps/web, shell: bash } }
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
          persist-credentials: false
      - uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json
      - name: Enable Corepack (npm)
        run: corepack enable
      - name: Install dependencies
        run: npm ci --prefer-offline
      - name: build
        run: npm run build
